From 1921dc18290477bd8f230235c509cc4712bc82dd Mon Sep 17 00:00:00 2001
From: "v.kovalchuk" <v.kovalchuk@crysto.ru>
Date: Mon, 4 Mar 2024 22:42:12 +0300
Subject: [PATCH] Production ready

---
 .dockerignore                 |  1 +
 Dockerfile                    | 44 +++++++++++++++++++++++++++++++++++
 Makefile                      | 15 ++++++++++++
 docker-compose.yml            | 24 +++++++++++++++++++
 faceswap/faceswap/settings.py | 11 +++++----
 faceswap/gunicorn.conf.py     |  8 +++++++
 faceswap/mainapp/views.py     | 17 ++++----------
 faceswap/wsgi.py              | 17 ++++++++++++++
 requirements.txt              |  6 +++++
 9 files changed, 125 insertions(+), 18 deletions(-)
 create mode 100644 .dockerignore
 create mode 100644 Dockerfile
 create mode 100644 Makefile
 create mode 100644 docker-compose.yml
 create mode 100644 faceswap/gunicorn.conf.py
 create mode 100644 faceswap/wsgi.py
 create mode 100644 requirements.txt

diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..90c48f7
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1 @@
+faceswap/roop/models/*
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..63bf589
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,44 @@
+FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
+
+ARG DEBIAN_FRONTEND=noninteractive
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    make \
+    git \
+    bash \
+    ffmpeg \
+    && rm -rf /var/lib/apt/lists/*
+
+RUN apt update -y && apt upgrade -y && \
+    apt-get install -y wget build-essential checkinstall  libncursesw5-dev  libssl-dev  libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev && \
+    cd /usr/src && \
+    wget https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tgz && \
+    tar xzf Python-3.10.11.tgz && \
+    cd Python-3.10.11 && \
+    ./configure --enable-optimizations && \
+    make altinstall && \
+    update-alternatives --install /usr/bin/python python /usr/local/bin/python3.10 0 && \
+    update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.10 0 && \
+    update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip3.10 0 && \
+    update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.10 0 && \
+    rm -rf /var/lib/apt/lists/*
+
+COPY inswapper_128.onnx /tmp/inswapper_128.onnx
+
+RUN git clone https://github.com/s0md3v/roop.git && \
+    cd roop && mkdir -p models && cp /tmp/inswapper_128.onnx ./models && \
+    git reset --hard c2d1feb17a9c51061b52cae5897136528f3b80cc && \
+    pip install -r requirements.txt && \
+    python run.py -s 1 -t 2 -o 3 && \
+    rm -rf roop
+
+
+WORKDIR /app
+
+COPY requirements.txt .
+RUN pip install -r requirements.txt
+
+COPY ./faceswap/ /app/
+
+EXPOSE 8000
+
+CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..ba6bf42
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,15 @@
+update:
+	git pull
+	docker compose up -d
+
+run:
+	docker compose up -d
+
+static:
+	docker compose run faceswap python manage.py collectstatic --no-input
+	sudo chown www-data:www-data -R faceswap/media
+	sudo chown www-data:www-data -R faceswap/static
+	sudo chmod o+r faceswap/media faceswap/static  
+
+venv:
+	source .venv/bin/activate
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..098346c
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,24 @@
+version: "3.8"
+
+
+services:
+  faceswap:
+    build:
+      context: .
+      dockerfile: Dockerfile
+    image: faceswap:latest
+    env_file:
+      - .env
+    container_name: faceswap
+    volumes:
+      - ./faceswap/:/app/
+    ports:
+        - "0.0.0.0:8000:8000"
+    command: gunicorn wsgi -c gunicorn.conf.py
+    deploy:
+      resources:
+        reservations:
+          devices:
+            - driver: nvidia
+              count: "all"
+              capabilities: [gpu]
diff --git a/faceswap/faceswap/settings.py b/faceswap/faceswap/settings.py
index 582e525..f534c75 100644
--- a/faceswap/faceswap/settings.py
+++ b/faceswap/faceswap/settings.py
@@ -21,13 +21,13 @@ BASE_DIR = Path(__file__).resolve().parent.parent
 # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-w56&iow@_ubck^0!pfz!236lr3l3z5s2+x=1_i_mc=!ciw2)^x'
+SECRET_KEY = os.getenv("SECRET_KEY")
 
 # SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
+DEBUG = os.getenv("DEBUG") == 1
 
-ALLOWED_HOSTS = ['176.99.135.76', '127.0.0.1', 'localhost']
-CSRF_TRUSTED_ORIGINS = ['http://*'] 
+ALLOWED_HOSTS = ['127.0.0.1', 'localhost', *os.getenv("ALLOWED_HOSTS").split(",")]
+CSRF_TRUSTED_ORIGINS = [*os.getenv("CSRF_TRUSTED_ORIGINS").split(",")] 
 
 # Application definition
 
@@ -118,6 +118,7 @@ USE_TZ = True
 # https://docs.djangoproject.com/en/5.0/howto/static-files/
 
 STATIC_URL = '/static/'
+STATIC_ROOT = 'static'
 
 # Default primary key field type
 # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
@@ -126,4 +127,4 @@ DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
 
 
 MEDIA_URL = '/media/'
-MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
\ No newline at end of file
+MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
diff --git a/faceswap/gunicorn.conf.py b/faceswap/gunicorn.conf.py
new file mode 100644
index 0000000..c41dcfc
--- /dev/null
+++ b/faceswap/gunicorn.conf.py
@@ -0,0 +1,8 @@
+bind = "0.0.0.0:8000"
+workers = 4
+accesslog = "-"
+errorlog = "-"
+access_log_format = '%(t)s "%(r)s" %(s)s'
+capture_output = True
+loglevel = "info"
+
diff --git a/faceswap/mainapp/views.py b/faceswap/mainapp/views.py
index e061c25..a8259ab 100644
--- a/faceswap/mainapp/views.py
+++ b/faceswap/mainapp/views.py
@@ -11,7 +11,6 @@ import threading
 from concurrent.futures import ThreadPoolExecutor
 import shutil
 from pathlib import Path
-import pycuda.driver as cuda
 import tempfile 
 
 
@@ -57,23 +56,16 @@ def process_photo(request):
         MAIN_DIR = Path(__file__).resolve().parent.parent 
         roop_dir = MAIN_DIR / "roop"
         
-            #get least used gpu and run render in gpu context
-        gpu = GPU.objects.order_by('counter').first()
-        gpuid = gpu.id
         
-        cuda.init()
-        gpu_device = cuda.Device(gpu.device_info)
         print(f's = {photo_path}')
         print(f't = {new_video_path}')
         print(f'o = {output_path}')  
 
         with ThreadPoolExecutor(max_workers=2, thread_name_prefix='render_queue') as pool:
-            rend = pool.submit(cuda_render, photo_path, output_path, new_video_path, gpu_device,roop_dir)
+            rend = pool.submit(cuda_render, photo_path, output_path, new_video_path, roop_dir)
         # threading.Thread(target=cuda_render, args=(photo_path, output_path, new_video_path, gpu_device,roop_dir,), name=f'render_{gpuid}').start()
 
               
-        gpu.counter += 1
-        gpu.save()
         return redirect('result', dirkey=dirkey)
 
 def download_photo(request, dirkey):
@@ -95,11 +87,10 @@ def delete_directory(directory):
     time.sleep(10)  
     shutil.rmtree(directory)
 
-def cuda_render(photo_path, output_path, new_video_path, gpu_device,roop_dir):
+def cuda_render(photo_path, output_path, new_video_path, roop_dir):
     time.sleep(2)
-    cuda.init()
-    command = f"python3 run.py --execution-provider cuda -s {photo_path} -t {new_video_path} -o {output_path}/result.mp4"
+    command = f"python3 run.py --execution-provider cuda -s {photo_path} -t {new_video_path} -o {output_path}/result.mp4 --frame-processor face_swapper --keep-frames --reference-frame-number 31"
     subprocess.check_call(command, shell=True, cwd=roop_dir)
     return 1
     
-    
\ No newline at end of file
+    
diff --git a/faceswap/wsgi.py b/faceswap/wsgi.py
new file mode 100644
index 0000000..7e0adc6
--- /dev/null
+++ b/faceswap/wsgi.py
@@ -0,0 +1,17 @@
+"""
+WSGI config for backend project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "faceswap.settings")
+
+application = get_wsgi_application()
+
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..8408be4
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,6 @@
+asgiref==3.7.2
+Django==5.0.3
+gunicorn==21.2.0
+packaging==23.2
+sqlparse==0.4.4
+typing_extensions==4.10.0
-- 
2.40.1

